//islands

void bfs(int n,int * visited,int ** edges,int sv)
{
    visited[sv]=1;
    for(int i=0;i<n;i++)
    {
        if(edges[sv][i]==1 && visited[i]==0)
        bfs(n,visited,edges,i);
    }
    
}


int printdfs(int **edges, int n, int sv, bool *visited){
    
        int a =1;
    visited[sv]=true;
    for(int i=0;i<n;i++){
        if(i==sv){
            continue;
        }
        if(edges[sv][i] && !visited[i]){
            // vec.push_back(i);
             printdfs(edges,n,i,visited);
        }
    }
    // cout<<endl;
    
    // return a;
}
int connection(int** edges,int n, int sv){
    
    bool visited[n];
    int count=0;
    for(int i=0;i<n;i++){
        visited[i] = false;
    }
    for(int i=0;i<n;i++){
        if(!visited[i]){
    		 printdfs(edges,n,i,visited);
            count++;
        }
    }
     return count;
}


int solve(int n,int m,vector<int>u,vector<int>v)
{
    int **edges = new int*[n];
    for(int i=0;i<n;i++){
        edges[i]= new int[n];
          for(int j=0;j<n;j++)
          {
            edges[i][j]=0;
          }
    // }
    }
    // for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            edges[u[j]-1][v[j]-1]=1;
             edges[v[j]-1][u[j]-1]=1;
        }
    // }
    return connection(edges,n,0);
    // for(int i=0;i<n;i++){
    //     for(int j=0;j<n;j++){
    //         cout<<edges[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }
    // return 0;
}


// int **edges=new int* [n];
//     for(int i=0;i<n;i++)
//     {
//         edges[i]=new int [n];
//         for(int j=0;j<n;j++)
//         {
//             edges[i][j]=0;
//         }
//     }
//     for(int i=0;i<u.size();i++)
//     {
//         edges[u[i]-1][v[i]-1]=1;
//         edges[v[i]-1][u[i]-1]=1;
//     }
//     int *visited=new int[n];
//     for(int i=0;i<n;i++)
//     {
//         visited[i]=0;
//     }
//     int count=0;
//     for(int i=0;i<n;i++)
//     {
//         if(visited[i]==0)
//         {
//             count++;
//             bfs(n,visited,edges,i);
//         }
//     }
    
//     return count;
